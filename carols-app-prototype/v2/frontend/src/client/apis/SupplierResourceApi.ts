/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Supplier,
    SupplierFromJSON,
    SupplierToJSON,
    SupplierEntity,
    SupplierEntityFromJSON,
    SupplierEntityToJSON,
} from '../models';

export interface CreateOrUpdateUsingPOST1Request {
    entities: Array<SupplierEntity>;
}

export interface DeleteByIdUsingPOST1Request {
    idList: Array<string>;
}

export interface GetAllUsingGET1Request {
    pageNumber?: number;
    size?: number;
}

export interface GetByIdUsingPOST1Request {
    idList: Array<string>;
}

/**
 * 
 */
export class SupplierResourceApi extends runtime.BaseAPI {

    /**
     * createOrUpdate
     */
    async createOrUpdateUsingPOST1Raw(requestParameters: CreateOrUpdateUsingPOST1Request): Promise<runtime.ApiResponse<Array<Supplier>>> {
        if (requestParameters.entities === null || requestParameters.entities === undefined) {
            throw new runtime.RequiredError('entities','Required parameter requestParameters.entities was null or undefined when calling createOrUpdateUsingPOST1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplier/create-or-update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.entities.map(SupplierEntityToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SupplierFromJSON));
    }

    /**
     * createOrUpdate
     */
    async createOrUpdateUsingPOST1(requestParameters: CreateOrUpdateUsingPOST1Request): Promise<Array<Supplier>> {
        const response = await this.createOrUpdateUsingPOST1Raw(requestParameters);
        return await response.value();
    }

    /**
     * deleteById
     */
    async deleteByIdUsingPOST1Raw(requestParameters: DeleteByIdUsingPOST1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.idList === null || requestParameters.idList === undefined) {
            throw new runtime.RequiredError('idList','Required parameter requestParameters.idList was null or undefined when calling deleteByIdUsingPOST1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplier/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.idList,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteById
     */
    async deleteByIdUsingPOST1(requestParameters: DeleteByIdUsingPOST1Request): Promise<void> {
        await this.deleteByIdUsingPOST1Raw(requestParameters);
    }

    /**
     * getAll
     */
    async getAllUsingGET1Raw(requestParameters: GetAllUsingGET1Request): Promise<runtime.ApiResponse<Array<Supplier>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/supplier/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SupplierFromJSON));
    }

    /**
     * getAll
     */
    async getAllUsingGET1(requestParameters: GetAllUsingGET1Request): Promise<Array<Supplier>> {
        const response = await this.getAllUsingGET1Raw(requestParameters);
        return await response.value();
    }

    /**
     * getById
     */
    async getByIdUsingPOST1Raw(requestParameters: GetByIdUsingPOST1Request): Promise<runtime.ApiResponse<Array<Supplier>>> {
        if (requestParameters.idList === null || requestParameters.idList === undefined) {
            throw new runtime.RequiredError('idList','Required parameter requestParameters.idList was null or undefined when calling getByIdUsingPOST1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplier/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.idList,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SupplierFromJSON));
    }

    /**
     * getById
     */
    async getByIdUsingPOST1(requestParameters: GetByIdUsingPOST1Request): Promise<Array<Supplier>> {
        const response = await this.getByIdUsingPOST1Raw(requestParameters);
        return await response.value();
    }

}
