buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE')
        classpath('io.swagger.core.v3:swagger-gradle-plugin:2.0.9.1')
    }
}

apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.swagger.core.v3.swagger-gradle-plugin'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

bootJar {
    baseName = 'application'
    version =  '0.1.0'
}

group = 'com.cap.backend'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

eclipse {
    classpath { defaultOutputDir = file('build') }
}

ext {
    set('immutablesVersion', '2.5.6')
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "Greenwich.SR3")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    annotationProcessor("org.immutables:value:${immutablesVersion}")
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

    compile("org.immutables:value:${immutablesVersion}")
    compile('ch.qos.logback:logback-classic')
    compile('ch.qos.logback:logback-core')
    compile('com.fasterxml.jackson.core:jackson-annotations')
    compile('com.fasterxml.jackson.core:jackson-core')
    compile('com.fasterxml.jackson.core:jackson-databind')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-guava')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-joda')
    compile('com.google.guava:guava')
    compile('net.logstash.logback:logstash-logback-encoder:6.2')
    compile('org.postgresql:postgresql')
    compile('org.slf4j:slf4j-api')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-cloud-connectors')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.cloud:spring-cloud-starter-sleuth')

    developmentOnly('org.springframework.boot:spring-boot-devtools')

    testCompile('io.rest-assured:rest-assured')
    testCompile('junit:junit')
    testCompile('org.junit.jupiter:junit-jupiter-api')
    testCompile('org.junit.jupiter:junit-jupiter-engine')
    testCompile('org.junit.jupiter:junit-jupiter-params')
    testCompile('org.mockito:mockito-core')
    testCompile('org.mockito:mockito-junit-jupiter')
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    //testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = "FULL"
    }

    reports {
        junitXml.enabled = true
        html.enabled = true
    }

    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0)
                    throw new GradleException("Tests are not run, check your build configuration")
            }
        }
    }

    useJUnitPlatform()
}

// Swagger task, stupid name.
resolve {
    classpath = sourceSets.main.runtimeClasspath
    openApiFile = file('src/main/resources/openapi.info.yaml')
    outputFormat = 'JSONANDYAML'
    outputPath = 'src/main/resources'
    outputFileName = 'openapi.spec'
    prettyPrint = 'TRUE'
    resourcePackages = ['com.cap.backend']
}

build.finalizedBy resolve

task startDatastore {
    group 'Docker Helpers'
    description 'Start the cap datastore docker image'
    doFirst {
        exec {
            commandLine './bin/start-datastore-docker.sh'
        }
    }
}

task stopDatastore {
    group 'Docker Helpers'
    description 'Stop a running docker image'
    doFirst {
        exec {
            commandLine './bin/stop-datastore-docker.sh'
        }
    }
}

test.dependsOn startDatastore
test.mustRunAfter startDatastore
test.finalizedBy stopDatastore

bootRun.dependsOn startDatastore
bootRun.mustRunAfter startDatastore
bootRun.finalizedBy stopDatastore

